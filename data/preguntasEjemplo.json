[
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué es React?",
    "options": [
      "Un framework de JavaScript para crear interfaces de usuario",
      "Un lenguaje de programación",
      "Una base de datos NoSQL",
      "Un sistema operativo"
    ],
    "answer": "Un framework de JavaScript para crear interfaces de usuario",
    "explanation": "React es una biblioteca de JavaScript para construir interfaces de usuario, especialmente aplicaciones de una sola página."
  },
  {
    "language": "html5",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué es HTML?",
    "options": [
      "Lenguaje para estructurar contenido Web.",
      "Computer Style System",
      "Creative Style Sheets",
      "Color Style System"
    ],
    "answer": "Lenguaje para estructurar contenido Web.",
    "explanation": "HTML define la estructura de las páginas web."
  },
  {
    "language": "html5",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Para qué sirve la etiqueta <a>?",
    "options": [
      "Insertar imágenes",
      "Crear enlaces (hipervínculos)",
      "Definir párrafos",
      "Agregar estilos CSS"
    ],
    "answer": "Crear enlaces (hipervínculos)",
    "explanation": "Permite la navegación entre páginas."
  },
  {
    "language": "html5",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta se utiliza para insertar imágenes?",
    "options": [
      "<img>",
      "<image>",
      "<picture>",
      "<src>"
    ],
    "answer": "<img>",
    "explanation": "Etiqueta para insertar imágenes."
  },
  {
    "language": "html5",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta se usa para crear un título principal?",
    "options": [
      "<title>",
      "<h1>",
      "<header>",
      "<head>"
    ],
    "answer": "<h1>",
    "explanation": "Define el encabezado principal."
  },
  {
    "language": "html5",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Cuál es la etiqueta para párrafos en HTML?",
    "options": [
      "<para>",
      "<text>",
      "<p>",
      "<par>"
    ],
    "answer": "<p>",
    "explanation": "Define un párrafo de texto."
  },
  {
    "language": "html5",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué atributo se usa para definir el enlace en la etiqueta <a>?",
    "options": [
      "src",
      "link",
      "href",
      "ref"
    ],
    "answer": "href",
    "explanation": "Indica la URL destino del enlace."
  },
  {
    "language": "html5",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Cómo se escribe un comentario en HTML?",
    "options": [
      "// comentario //",
      "// comentario",
      "<!-- comentario -->",
      "/* comentario */"
    ],
    "answer": "<!-- comentario -->",
    "explanation": "Formato correcto para comentarios."
  },
  {
    "language": "html5",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta crea una lista ordenada?",
    "options": [
      "<ul>",
      "<ol>",
      "<li>",
      "<list>"
    ],
    "answer": "<ol>",
    "explanation": "Lista numerada u ordenada."
  },
  {
    "language": "html5",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta crea una lista no ordenada?",
    "options": [
      "<ol>",
      "<li>",
      "<ul>",
      "<list>"
    ],
    "answer": "<ul>",
    "explanation": "Lista con viñetas sin orden."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué función tiene la etiqueta <br>?",
    "options": [
      "Insertar un salto de línea",
      "Crear un enlace",
      "Insertar una imagen",
      "Definir un bloque"
    ],
    "answer": "Insertar un salto de línea",
    "explanation": "Salto de línea dentro de texto."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Para qué se usa el atributo alt en la etiqueta <img>?",
    "options": [
      "Para agregar título a la imagen",
      "Texto alternativo si la imagen no carga",
      "Para colocar un enlace",
      "Para definir el tamaño de la imagen"
    ],
    "answer": "Texto alternativo si la imagen no carga",
    "explanation": "Importante para accesibilidad."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta se usa para crear un botón en HTML?",
    "options": [
      "<button>",
      "<input>",
      "<form>",
      "<btn>"
    ],
    "answer": "<button>",
    "explanation": "Etiqueta para botones."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Cómo se crea una tabla en HTML?",
    "options": [
      "<table>, <tr>, <td>",
      "<table>, <row>, <cell>",
      "<tab>, <tr>, <td>",
      "<table>, <thead>, <tbody>"
    ],
    "answer": "<table>, <tr>, <td>",
    "explanation": "Estructura básica de tablas."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta sirve para insertar un video en HTML?",
    "options": [
      "<video>",
      "<media>",
      "<movie>",
      "<embed>"
    ],
    "answer": "<video>",
    "explanation": "Inserta videos en la página."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta se usa para definir un formulario en HTML?",
    "options": [
      "<input>",
      "<form>",
      "<textarea>",
      "<submit>"
    ],
    "answer": "<form>",
    "explanation": "Contenedor de controles de formulario."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Cuál es la diferencia principal entre <span> y <div>?",
    "options": [
      "<span> es un elemento de bloque y <div> en línea",
      "<div> es un elemento de bloque y <span> en línea",
      "Ambos son elementos en línea",
      "Ambos son elementos de bloque"
    ],
    "answer": "<div> es un elemento de bloque y <span> en línea",
    "explanation": "Difieren en comportamiento visual."
  },
  {
    "language": "html5",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta se usa para vincular un archivo CSS externo?",
    "options": [
      "<script>",
      "<link>",
      "<style>",
      "<css>"
    ],
    "answer": "<link>",
    "explanation": "Usada para enlazar hojas de estilo."
  },
  {
    "language": "html5",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta HTML indica el inicio del documento?",
    "options": [
      "<start>",
      "<html>",
      "<!DOCTYPE html>",
      "<head>"
    ],
    "answer": "<!DOCTYPE html>",
    "explanation": "Declara el tipo de documento."
  },
  {
    "language": "html5",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Para qué se usa la etiqueta <meta> dentro del <head>?",
    "options": [
      "Agregar imágenes",
      "Definir metadata sobre la página",
      "Insertar estilos",
      "Crear párrafos"
    ],
    "answer": "Definir metadata sobre la página",
    "explanation": "Provee información para navegadores y buscadores."
  },
  {
    "language": "html5",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué etiqueta permite insertar un video de YouTube mediante código embebido?",
    "options": [
      "<iframe>",
      "<embed>",
      "<video>",
      "<object>"
    ],
    "answer": "<iframe>",
    "explanation": "Incrusta contenidos externos como videos."
  },
  {
    "language": "css",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Cuál es la propiedad para cambiar el color del texto?",
    "options": [
      "color",
      "text-color",
      "font-color",
      "text-style"
    ],
    "answer": "color",
    "explanation": "La propiedad 'color' en CSS se usa para cambiar el color del texto de un elemento."
  },
  {
    "language": "css",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué propiedad se utiliza para cambiar el tipo de letra?",
    "options": [
      "font",
      "font-type",
      "font-family",
      "text-font"
    ],
    "answer": "font-family",
    "explanation": "'font-family' permite especificar la fuente tipográfica de un texto."
  },
  {
    "language": "css",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hace la propiedad 'padding' en CSS?",
    "options": [
      "Define el espacio externo de un elemento",
      "Agrega sombra a los elementos",
      "Define el espacio interno entre el contenido y el borde",
      "Cambia el color del fondo"
    ],
    "answer": "Define el espacio interno entre el contenido y el borde",
    "explanation": "'padding' agrega espacio dentro del borde de un elemento, empujando el contenido hacia adentro."
  },
  {
    "language": "css",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué valor de la propiedad 'display' oculta completamente un elemento?",
    "options": [
      "none",
      "hidden",
      "invisible",
      "block"
    ],
    "answer": "none",
    "explanation": "'display: none' oculta el elemento y elimina su espacio en el diseño."
  },
  {
    "language": "css",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Para qué se utiliza la propiedad 'z-index'?",
    "options": [
      "Para cambiar el tamaño del texto",
      "Para alinear elementos horizontalmente",
      "Para definir el orden de apilamiento de elementos",
      "Para cambiar la opacidad"
    ],
    "answer": "Para definir el orden de apilamiento de elementos",
    "explanation": "'z-index' permite controlar qué elementos se superponen sobre otros en el eje Z."
  },
  {
    "language": "css",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué unidad es relativa al tamaño de fuente del elemento actual?",
    "options": [
      "px",
      "em",
      "%",
      "vh"
    ],
    "answer": "em",
    "explanation": "'em' es una unidad relativa que depende del tamaño de fuente del elemento padre o del propio."
  },
  {
    "language": "css",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué propiedad se utiliza para aplicar múltiples fondos a un elemento?",
    "options": [
      "background-layer",
      "multi-bg",
      "background",
      "backgrounds"
    ],
    "answer": "background",
    "explanation": "La propiedad 'background' permite definir múltiples imágenes de fondo separadas por comas."
  },
  {
    "language": "css",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué valor de 'position' posiciona un elemento en relación con su contenedor más cercano con posición relativa?",
    "options": [
      "fixed",
      "static",
      "absolute",
      "relative"
    ],
    "answer": "absolute",
    "explanation": "'absolute' posiciona el elemento respecto al primer ancestro con posición distinta a 'static'."
  },
  {
    "language": "css",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Para qué sirve la propiedad 'flex-direction'?",
    "options": [
      "Para definir la dirección del texto",
      "Para controlar el orden de apilamiento de capas",
      "Para definir la dirección de los ítems en un contenedor flex",
      "Para girar un elemento"
    ],
    "answer": "Para definir la dirección de los ítems en un contenedor flex",
    "explanation": "'flex-direction' determina si los elementos flex se disponen en fila o columna."
  },
  {
    "language": "css",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué propiedad permite crear animaciones en CSS?",
    "options": [
      "transition",
      "animation",
      "motion",
      "transform"
    ],
    "answer": "animation",
    "explanation": "'animation' permite aplicar animaciones definidas con keyframes a los elementos."
  },
  {
    "language": "javascript",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué palabra clave se utiliza para declarar una variable en JavaScript?",
    "options": [
      "var",
      "int",
      "define",
      "declare"
    ],
    "answer": "var",
    "explanation": "La palabra clave 'var' se utiliza para declarar variables en JavaScript (aunque también existen 'let' y 'const')."
  },
  {
    "language": "javascript",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Cuál de los siguientes valores es un tipo de dato primitivo?",
    "options": [
      "object",
      "function",
      "number",
      "array"
    ],
    "answer": "number",
    "explanation": "Los tipos primitivos incluyen number, string, boolean, null, undefined y symbol."
  },
  {
    "language": "javascript",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué operador se utiliza para concatenar cadenas en JavaScript?",
    "options": [
      "+",
      "&",
      ".",
      "concat"
    ],
    "answer": "+",
    "explanation": "El operador '+' se utiliza para concatenar cadenas en JavaScript."
  },
  {
    "language": "javascript",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Cómo se escribe un comentario de una línea en JavaScript?",
    "options": [
      "<!-- comentario -->",
      "// comentario",
      "# comentario",
      "** comentario **"
    ],
    "answer": "// comentario",
    "explanation": "Los comentarios de una línea en JavaScript se escriben con doble barra diagonal: //"
  },
  {
    "language": "javascript",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Cuál es el resultado de 2 + '2' en JavaScript?",
    "options": [
      "4",
      "22",
      "NaN",
      "undefined"
    ],
    "answer": "22",
    "explanation": "JavaScript convierte el número 2 a cadena y concatena, resultando en '22'."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Cuál es la diferencia entre 'let' y 'var'?",
    "options": [
      "let tiene alcance de función, var no",
      "var es más seguro que let",
      "let tiene alcance de bloque, var tiene alcance de función",
      "no hay diferencia"
    ],
    "answer": "let tiene alcance de bloque, var tiene alcance de función",
    "explanation": "La principal diferencia es el alcance: 'let' tiene alcance de bloque, mientras que 'var' tiene alcance de función."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué valor devuelve 'typeof null'?",
    "options": [
      "null",
      "object",
      "undefined",
      "boolean"
    ],
    "answer": "object",
    "explanation": "'typeof null' devuelve 'object' por una peculiaridad del lenguaje desde sus inicios."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué método convierte una cadena en un número entero?",
    "options": [
      "parseFloat()",
      "Number()",
      "parseInt()",
      "toNumber()"
    ],
    "answer": "parseInt()",
    "explanation": "parseInt() convierte una cadena en un número entero."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué significa NaN en JavaScript?",
    "options": [
      "Not a Number",
      "New assigned Number",
      "Next available Number",
      "Null and None"
    ],
    "answer": "Not a Number",
    "explanation": "NaN significa 'Not a Number' y aparece cuando una operación matemática falla."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué método se usa para recorrer todos los elementos de un array?",
    "options": [
      "map()",
      "filter()",
      "reduce()",
      "forEach()"
    ],
    "answer": "forEach()",
    "explanation": "forEach() ejecuta una función en cada elemento del array."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué hace el método 'bind()' en una función?",
    "options": [
      "Llama a la función",
      "Copia la función",
      "Establece el valor de 'this'",
      "Elimina la función"
    ],
    "answer": "Establece el valor de 'this'",
    "explanation": "bind() permite establecer el valor de 'this' para una función."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Cuál es el propósito del operador '===' en JavaScript?",
    "options": [
      "Compara solo valores",
      "Compara valores y tipos",
      "Asigna valores",
      "Convierte tipos automáticamente"
    ],
    "answer": "Compara valores y tipos",
    "explanation": "'===' compara tanto el valor como el tipo de los operandos."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué estructura permite manejar errores en JavaScript?",
    "options": [
      "if...else",
      "try...catch",
      "switch",
      "do...while"
    ],
    "answer": "try...catch",
    "explanation": "try...catch se utiliza para capturar y manejar errores en tiempo de ejecución."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué resultado da '0 == false'?",
    "options": [
      "true",
      "false",
      "undefined",
      "Error"
    ],
    "answer": "true",
    "explanation": "Con '==', JavaScript convierte tipos antes de comparar, y 0 es igual a false."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué hace la función setTimeout()?",
    "options": [
      "Repite una función indefinidamente",
      "Ejecuta una función después de cierto tiempo",
      "Detiene la ejecución del programa",
      "Cancela una función"
    ],
    "answer": "Ejecuta una función después de cierto tiempo",
    "explanation": "setTimeout() ejecuta una función una vez después de un tiempo especificado en milisegundos."
  },
  {
    "language": "javascript",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué símbolo se utiliza para terminar una instrucción en JavaScript?",
    "options": [
      "!",
      ";",
      ".",
      ","
    ],
    "answer": ";",
    "explanation": "Se recomienda usar punto y coma (;) para terminar instrucciones, aunque no siempre es obligatorio."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Cuál es el método correcto para convertir un número a cadena?",
    "options": [
      "toString()",
      "stringify()",
      "toChar()",
      "convert()"
    ],
    "answer": "toString()",
    "explanation": "El método toString() convierte un número a cadena."
  },
  {
    "language": "javascript",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hace el método 'push()' en un array?",
    "options": [
      "Elimina el último elemento",
      "Agrega un elemento al final",
      "Ordena los elementos",
      "Invierte el array"
    ],
    "answer": "Agrega un elemento al final",
    "explanation": "push() agrega uno o más elementos al final de un array."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué devuelve una función sin valor explícito de retorno?",
    "options": [
      "null",
      "false",
      "undefined",
      "0"
    ],
    "answer": "undefined",
    "explanation": "Si no se especifica un valor de retorno, una función devuelve undefined por defecto."
  },
  {
    "language": "javascript",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué método se usa para combinar dos arrays?",
    "options": [
      "join()",
      "concat()",
      "merge()",
      "append()"
    ],
    "answer": "concat()",
    "explanation": "concat() se utiliza para combinar dos o más arrays en uno solo."
  },
  {
    "language": "javascript",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Cuál es la diferencia principal entre una función async y una función normal en JavaScript?",
    "options": [
      "Una función async siempre retorna null",
      "Una función async permite usar await dentro de su cuerpo",
      "Una función async no puede usar promesas",
      "No hay diferencia real entre ambas"
    ],
    "answer": "Una función async permite usar await dentro de su cuerpo",
    "explanation": "Las funciones async devuelven una promesa y permiten el uso del operador 'await' para manejar operaciones asíncronas de forma más legible."
  },
  {
    "language": "javascript",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué representa el término 'closure' en JavaScript?",
    "options": [
      "Una función que no tiene acceso a variables externas",
      "Un error de ejecución en el código",
      "Una función que recuerda el ámbito en el que fue creada",
      "Un método para cerrar conexiones de red"
    ],
    "answer": "Una función que recuerda el ámbito en el que fue creada",
    "explanation": "Un closure permite que una función acceda a variables de su entorno léxico incluso después de que ese entorno haya finalizado."
  },
  {
    "language": "javascript",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué ocurre cuando se ejecuta una promesa sin manejar sus errores?",
    "options": [
      "El programa se detiene inmediatamente",
      "El error se ignora silenciosamente",
      "Se lanza una excepción no capturada",
      "La promesa se convierte en una función síncrona"
    ],
    "answer": "Se lanza una excepción no capturada",
    "explanation": "Si una promesa rechazada no es capturada mediante catch o try/catch con async/await, se lanza un error no capturado."
  },
  {
    "language": "javascript",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Cuál es el resultado de ejecutar el siguiente código?\n\njs\nconsole.log([] + {});\n",
    "options": [
      "'[object Object]'",
      "NaN",
      "undefined",
      "TypeError"
    ],
    "answer": "'[object Object]'",
    "explanation": "La operación convierte ambos operandos a strings: [] se convierte en '', y {} en '[object Object]'. El resultado es la concatenación: '[object Object]'."
  },
  {
    "language": "javascript",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué hace el operador '??' (nullish coalescing) en JavaScript?",
    "options": [
      "Devuelve el primer operando si es distinto de null o undefined",
      "Compara igualdad estricta",
      "Evalúa si una variable está definida",
      "Ignora errores en expresiones"
    ],
    "answer": "Devuelve el primer operando si es distinto de null o undefined",
    "explanation": "El operador '??' devuelve el operando de la izquierda si no es null ni undefined; de lo contrario, devuelve el operando de la derecha."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué es React?",
    "options": [
      "Un framework de JavaScript para crear interfaces de usuario",
      "Un lenguaje de programación",
      "Una base de datos NoSQL",
      "Un sistema operativo"
    ],
    "answer": "Un framework de JavaScript para crear interfaces de usuario",
    "explanation": "React es una biblioteca de JavaScript para construir interfaces de usuario, especialmente aplicaciones de una sola página."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Cuál es la función principal de React?",
    "options": [
      "Manipular directamente el DOM",
      "Crear y actualizar interfaces de usuario de forma eficiente",
      "Ejecutar consultas a bases de datos",
      "Servir archivos estáticos"
    ],
    "answer": "Crear y actualizar interfaces de usuario de forma eficiente",
    "explanation": "React permite construir interfaces de usuario reactivas y eficientes utilizando un DOM virtual para optimizar actualizaciones."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué es un componente en React?",
    "options": [
      "Una base de datos interna",
      "Una función o clase que devuelve elementos de interfaz",
      "Un archivo CSS",
      "Un servidor de API"
    ],
    "answer": "Una función o clase que devuelve elementos de interfaz",
    "explanation": "En React, un componente es una unidad reutilizable que describe parte de la interfaz de usuario."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Cómo se llama la sintaxis que combina HTML y JavaScript en React?",
    "options": [
      "HTML+",
      "JSX",
      "JScript",
      "ReactML"
    ],
    "answer": "JSX",
    "explanation": "JSX es una extensión de JavaScript que permite escribir HTML dentro del código JS para describir la UI."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué método se utiliza para renderizar un componente en el DOM?",
    "options": [
      "React.create()",
      "ReactDOM.render()",
      "renderDOM()",
      "createDOM()"
    ],
    "answer": "ReactDOM.render()",
    "explanation": "ReactDOM.render() es el método usado para mostrar un componente de React dentro del DOM real."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué tipo de datos pueden recibir las props en React?",
    "options": [
      "Solo cadenas de texto",
      "Solo objetos",
      "Cualquier tipo de dato válido en JavaScript",
      "Solo números y booleanos"
    ],
    "answer": "Cualquier tipo de dato válido en JavaScript",
    "explanation": "Las props pueden ser cualquier valor que JavaScript permita: números, strings, booleanos, objetos, funciones, etc."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué empresa desarrolló React?",
    "options": [
      "Google",
      "Microsoft",
      "Meta (Facebook)",
      "Amazon"
    ],
    "answer": "Meta (Facebook)",
    "explanation": "React fue desarrollado por ingenieros de Facebook, ahora Meta."
  },
  {
    "language": "react",
    "level": 1,
    "type": "multiple_choice",
    "question": "¿Qué significa que React sea declarativo?",
    "options": [
      "Que se enfoca en cómo manipular el DOM paso a paso",
      "Que describe el resultado esperado de la interfaz y React decide cómo actualizarla",
      "Que no se puede modificar su código fuente",
      "Que no se puede usar con JavaScript"
    ],
    "answer": "Que describe el resultado esperado de la interfaz y React decide cómo actualizarla",
    "explanation": "En un enfoque declarativo, describes el estado final de la UI y React maneja las actualizaciones necesarias."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hook se utiliza para manejar estado en componentes funcionales?",
    "options": [
      "useEffect",
      "useState",
      "useRef",
      "useContext"
    ],
    "answer": "useState",
    "explanation": "useState es un hook que permite a los componentes funcionales tener y actualizar estado interno."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué propiedad de los componentes permite pasarles datos desde el padre?",
    "options": [
      "props",
      "state",
      "context",
      "render"
    ],
    "answer": "props",
    "explanation": "Las props (propiedades) son datos que se pasan a los componentes desde su padre para configurar su comportamiento."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hook se usa para ejecutar código después de renderizar?",
    "options": [
      "useCallback",
      "useEffect",
      "useMemo",
      "useState"
    ],
    "answer": "useEffect",
    "explanation": "useEffect ejecuta efectos secundarios como llamadas a API o suscripciones después del render."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hook devuelve un valor que persiste entre renders sin causar re-render?",
    "options": [
      "useEffect",
      "useMemo",
      "useRef",
      "useReducer"
    ],
    "answer": "useRef",
    "explanation": "useRef mantiene un valor persistente que no dispara un nuevo render cuando cambia."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hook es útil para optimizar funciones que se pasan como props?",
    "options": [
      "useCallback",
      "useEffect",
      "useMemo",
      "useRef"
    ],
    "answer": "useCallback",
    "explanation": "useCallback memoriza funciones para evitar recrearlas en cada render y así optimizar rendimiento."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué hook es útil para manejar estados complejos con múltiples subvalores?",
    "options": [
      "useState",
      "useReducer",
      "useContext",
      "useMemo"
    ],
    "answer": "useReducer",
    "explanation": "useReducer es ideal para manejar estados con lógica compleja o múltiples valores interrelacionados."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué se necesita para que un componente React sea controlado?",
    "options": [
      "Tener estado interno que maneje su valor",
      "Usar siempre useEffect",
      "No recibir props",
      "Estar envuelto en React.memo"
    ],
    "answer": "Tener estado interno que maneje su valor",
    "explanation": "Un componente controlado tiene su valor gestionado por React mediante estado y props."
  },
  {
    "language": "react",
    "level": 2,
    "type": "multiple_choice",
    "question": "¿Qué es el Context API en React?",
    "options": [
      "Una API para manejar rutas",
      "Una herramienta para compartir datos globales sin pasar props manualmente",
      "Una librería externa de React",
      "Un método para optimizar renderizado"
    ],
    "answer": "Una herramienta para compartir datos globales sin pasar props manualmente",
    "explanation": "Context API permite compartir datos a lo largo del árbol de componentes sin 'prop drilling'."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Cuál es la función de useEffect en React?",
    "options": [
      "Manejar el estado del componente",
      "Ejecutar efectos secundarios después del renderizado",
      "Optimizar el rendimiento de la aplicación",
      "Definir rutas en la aplicación"
    ],
    "answer": "Ejecutar efectos secundarios después del renderizado",
    "explanation": "useEffect permite ejecutar código adicional (como peticiones o suscripciones) después de que el componente se renderice."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Cuál es la diferencia principal entre state y props?",
    "options": [
      "state es inmutable, props es mutable",
      "state pertenece al componente y props se recibe desde fuera",
      "props solo se usa con clases",
      "state solo se usa con funciones"
    ],
    "answer": "state pertenece al componente y props se recibe desde fuera",
    "explanation": "El state es interno y controlado por el propio componente, mientras que las props se reciben desde un componente padre."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué ocurre si no se pasa una key única a los elementos en un .map()?",
    "options": [
      "React genera automáticamente una key única",
      "Puede causar problemas de rendimiento y renderizado incorrecto",
      "El código no compila",
      "El componente se vuelve inmutable"
    ],
    "answer": "Puede causar problemas de rendimiento y renderizado incorrecto",
    "explanation": "Las keys ayudan a React a identificar elementos y evitar renders innecesarios."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué hook se usa para memorizar valores calculados?",
    "options": [
      "useMemo",
      "useCallback",
      "useEffect",
      "useState"
    ],
    "answer": "useMemo",
    "explanation": "useMemo guarda valores calculados para no recalcularlos en cada render."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué es el prop drilling?",
    "options": [
      "El paso innecesario de props a través de múltiples niveles de componentes",
      "Un método para depurar código",
      "Una técnica para optimizar renders",
      "Un hook avanzado"
    ],
    "answer": "El paso innecesario de props a través de múltiples niveles de componentes",
    "explanation": "Prop drilling ocurre cuando datos deben pasar por componentes que no los necesitan, solo para llegar a otros más abajo."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Cómo se actualiza el estado basado en el valor anterior en useState?",
    "options": [
      "Pasando el nuevo valor directamente",
      "Pasando una función que recibe el estado previo",
      "Usando useEffect",
      "Usando setState sin argumentos"
    ],
    "answer": "Pasando una función que recibe el estado previo",
    "explanation": "setState permite recibir el valor previo para calcular el nuevo estado correctamente."
  },
  {
    "language": "react",
    "level": 3,
    "type": "multiple_choice",
    "question": "¿Qué método del ciclo de vida equivale a useEffect con [] en componentes de clase?",
    "options": [
      "componentDidUpdate",
      "componentDidMount",
      "componentWillUnmount",
      "render"
    ],
    "answer": "componentDidMount",
    "explanation": "useEffect con [] se ejecuta solo una vez después del primer render, igual que componentDidMount."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué es el Virtual DOM en React?",
    "options": [
      "Una copia idéntica del DOM almacenada en el navegador",
      "Una representación en memoria del DOM real que React usa para optimizar actualizaciones",
      "Un API del navegador para manipular el DOM",
      "Un servidor especial para React"
    ],
    "answer": "Una representación en memoria del DOM real que React usa para optimizar actualizaciones",
    "explanation": "El Virtual DOM es una copia en memoria que React usa para calcular los cambios antes de aplicarlos al DOM real, mejorando el rendimiento."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Cuál es la diferencia entre React.memo y useMemo?",
    "options": [
      "React.memo es para memorizar valores, useMemo es para componentes",
      "React.memo memoriza componentes para evitar renders innecesarios, useMemo memoriza valores o resultados de funciones",
      "No hay diferencia, son lo mismo",
      "useMemo solo se puede usar con clases"
    ],
    "answer": "React.memo memoriza componentes para evitar renders innecesarios, useMemo memoriza valores o resultados de funciones",
    "explanation": "React.memo evita que un componente funcional se renderice si sus props no han cambiado, mientras que useMemo almacena valores calculados para no recalcularlos en cada render."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué es la reconciliación en React?",
    "options": [
      "El proceso de unir múltiples componentes",
      "El algoritmo que React usa para actualizar el DOM de forma eficiente",
      "Un hook experimental",
      "Un método para sincronizar estados"
    ],
    "answer": "El algoritmo que React usa para actualizar el DOM de forma eficiente",
    "explanation": "La reconciliación compara el Virtual DOM previo con el nuevo para aplicar solo los cambios necesarios."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué técnica se puede usar para cargar componentes bajo demanda?",
    "options": [
      "Lazy loading con React.lazy",
      "ReactDOM.preload",
      "useDeferred",
      "componentDelay"
    ],
    "answer": "Lazy loading con React.lazy",
    "explanation": "React.lazy permite importar componentes dinámicamente para reducir el tamaño inicial del bundle."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué hook se usa para diferir cálculos pesados hasta que sea necesario?",
    "options": [
      "useMemo",
      "useCallback",
      "useDeferredValue",
      "useRef"
    ],
    "answer": "useMemo",
    "explanation": "useMemo retrasa la ejecución de cálculos hasta que cambien sus dependencias."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué problema soluciona el hook useTransition?",
    "options": [
      "Controlar datos globales",
      "Separar actualizaciones urgentes de las no urgentes",
      "Cargar imágenes de forma diferida",
      "Evitar renders de hijos"
    ],
    "answer": "Separar actualizaciones urgentes de las no urgentes",
    "explanation": "useTransition permite marcar ciertas actualizaciones como no urgentes para mantener la UI fluida."
  },
  {
    "language": "react",
    "level": 4,
    "type": "multiple_choice",
    "question": "¿Qué hook se utiliza para suscribirse manualmente a un evento externo y limpiar al desmontar?",
    "options": [
      "useState",
      "useEffect",
      "useCallback",
      "useMemo"
    ],
    "answer": "useEffect",
    "explanation": "useEffect es ideal para suscribirse a eventos y devolver una función de limpieza para liberar recursos."
  }
]